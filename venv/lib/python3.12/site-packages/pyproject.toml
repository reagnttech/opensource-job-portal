[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "django-schema-viewer"
dynamic = ["version"]
description = "Visualizes a DB schema based on Django models"
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = [
  'django',
  'database-gui',
  'django-models',
  'django-schema',
  'django-schema-graph',
  'database-schema',
  'entity-relationship-diagram',
  'er-diagram',
  'erd',
  'json-table-schema',
  'schema',
  'schema-diagram',
  'schema-graph',
  'schema-viewer',
  'viewer',
]
authors = [
  { name = "Sergei Pikhovkin", email = "s@pikhovkin.ru" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  'Environment :: Web Environment',
  'Framework :: Django :: 4.0',
  'Framework :: Django :: 4.1',
  'Framework :: Django :: 4.2',
  'Framework :: Django :: 5.0',
  'Framework :: Django :: 5.1',
  'License :: OSI Approved :: MIT License',
  'Operating System :: OS Independent',
  "Programming Language :: Python",
  'Programming Language :: Python :: 3',
  'Programming Language :: Python :: 3 :: Only',
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: System :: Monitoring",
  "Topic :: Utilities",
]
dependencies = [
  'Django>=4.0',
]

[project.urls]
Documentation = "https://github.com/pikhovkin/django-schema-viewer#readme"
Issues = "https://github.com/pikhovkin/django-schema-viewer/issues"
Source = "https://github.com/pikhovkin/django-schema-viewer"

[tool.hatch.version]
path = "schema_viewer/__about__.py"

[tool.hatch.build]
include = [
  "schema_viewer/",
  "README.md",
  "LICENSE",
  "pyproject.toml",
]

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
  "pytest-django",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:schema_viewer/tests}"
test-cov = "coverage run -m pytest {args:schema_viewer/tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
  "coverage json",
]
cov = [
  "test-cov",
  "cov-report",
]

[tool.hatch.envs.all.overrides]
matrix.django.dependencies = [
  {value='Django~=4.0.0', if=['4.0']},
  {value='Django~=4.1.0', if=['4.1']},
  {value='Django~=4.2.0', if=['4.2']},
  {value='Django~=5.0.0', if=['5.0']},
  {value='Django~=5.1.0', if=['5.1']},
]

[[tool.hatch.envs.all.matrix]]
python = ["3.10", "3.11", "3.12", "3.13"]
django = ["4.0", "4.1", "4.2", "5.0", "5.1"]

[tool.hatch.envs.typing]
dependecies = [
  "django-stubs[compatible-mypy]",
]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.9.0",
  "mypy>=1.13",
  "ruff>=0.8.0",
  "isort>=5.13.2",
  "django-stubs[compatible-mypy]>=5.1.1",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:schema_viewer}"
style = [
  "isort {args:schema_viewer}",
  "ruff check {args:schema_viewer}",
  "black --check --diff {args:schema_viewer}",
]
fmt = [
  "black {args:schema_viewer}",
  "ruff format {args:schema_viewer}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "tests.conf.settings"

[tool.mypy]
plugins = ["mypy_django_plugin.main"]

[tool.django-stubs]
django_settings_module = "tests.conf.settings"

[tool.black]
target-version = ["py311"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
src = [
  'schema_viewer',
]
target-version = "py311"
line-length = 120
lint.select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
lint.ignore = [
  'Q000',  # Single quotes found but double quotes preferred
#  'C408',
#  'T201',
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
lint.unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["schema_viewer"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["schema_viewer"]
branch = true
parallel = true
omit = [
  "schema_viewer/__about__.py",
]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
